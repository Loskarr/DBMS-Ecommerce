version: '3.8'

services:
  zookeeper:
      image: confluentinc/cp-zookeeper:latest
      hostname: zookeeper
      container_name: zookeeper
      ports:
        - "2181:2181"
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
      healthcheck:
        test: ['CMD', 'bash', '-c', "echo 'ruok' | nc localhost 2181"]
        interval: 10s
        timeout: 15s
        retries: 10
      networks:
        - confluent
      restart: always

  broker:
    image: confluentinc/cp-server:latest
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper

    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "bash", "-c", 'nc -z localhost 9092' ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: unless-stopped

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLIENT_METRICS_ENABLE: 'false'
      PORT: 9021
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9021/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
  redis:
    image: redis:latest
    container_name: redis
    hostname: redis
    restart: always
    environment:
    # ALLOW_EMPTY_PASSWORD is recommended only for development.
      - ALLOW_EMPTY_PASSWORD=yes
      # - REDIS_PASSWORD=password123
      # - REDIS_AOF_ENABLED=no
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    volumes:
      - redis_data:/data
      # - redis_data:/bitnami/redis/data
      # - certs:/opt/bitnami/redis/certs
    ports:
      - 6379:6379
    networks:
      - confluent
  redis_insight:
    image: redis/redisinsight:latest
    container_name: redis_insight
    hostname: redis_insight
    restart: always
    ports:
      - 5540:5540
    volumes:
      - redis_insight_data:/db
    networks:
      - confluent

  cassandra1:
    image: cassandra:latest
    container_name: cassandra1
    hostname: cassandra1
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_DC=se1
      - MAX_HEAP_SIZE=512M
      - HEAP_NEWSIZE=100M
      - CASSANDRA_USERNAME=cassandra
      - CASSANDRA_PASSWORD=cassandra
    networks:
      - confluent
    restart: always

  # cassandra2:
  #   image: cassandra:latest
  #   container_name: cassandra2
  #   volumes:
  #     - "cassandra_data_2:/var/lib/cassandra"
  #   environment:
  #     - CASSANDRA_SEEDS=cassandra1
  #   depends_on:
  #     - cassandra1
  #   networks:
  #     - confluent
  #   # restart: always

  # cassandra3:
  #   image: cassandra:latest
  #   container_name: cassandra3
  #   volumes:
  #     - "cassandra_data_3:/var/lib/cassandra"
  #   environment:
  #     - CASSANDRA_SEEDS=cassandra1

  #   depends_on:
  #     - cassandra1
  #   networks:
  #     - confluent
    # restart: always
# setup:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
  #   volumes:
  #     - certs:/usr/share/elasticsearch/config/certs
  #   user: "0"
  #   command: >
  #     bash -c '
  #       if [ x${ELASTIC_PASSWORD} == x ]; then
  #         echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
  #         exit 1;
  #       elif [ x${KIBANA_PASSWORD} == x ]; then
  #         echo "Set the KIBANA_PASSWORD environment variable in the .env file";
  #         exit 1;
  #       fi;
  #       if [ ! -f config/certs/ca.zip ]; then
  #         echo "Creating CA";
  #         bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
  #         unzip config/certs/ca.zip -d config/certs;
  #       fi;
  #       if [ ! -f config/certs/certs.zip ]; then
  #         echo "Creating certs";
  #         echo -ne \
  #         "instances:\n"\
  #         "  - name: es01\n"\
  #         "    dns:\n"\
  #         "      - es01\n"\
  #         "      - localhost\n"\
  #         "    ip:\n"\
  #         "      - 127.0.0.1\n"\
  #         "  - name: kibana\n"\
  #         "    dns:\n"\
  #         "      - kibana\n"\
  #         "      - localhost\n"\
  #         "    ip:\n"\
  #         "      - 127.0.0.1\n"\
  #         > config/certs/instances.yml;
  #         bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
  #         unzip config/certs/certs.zip -d config/certs;
  #       fi;
  #       echo "Setting file permissions"
  #       chown -R root:root config/certs;
  #       find . -type d -exec chmod 750 \{\} \;;
  #       find . -type f -exec chmod 640 \{\} \;;
  #       echo "Waiting for Elasticsearch availability";
  #       until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
  #       echo "Setting kibana_system password";
  #       until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
  #       echo "All done!";
  #     '
  #   healthcheck:
  #     test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
  #     interval: 1s
  #     timeout: 5s
  #     retries: 120
  #   networks:
  #     - confluent
  
  # es01:
  #   depends_on:
  #     setup:
  #       condition: service_healthy
  #   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
  #   labels:
  #     co.elastic.logs/module: elasticsearch
  #   volumes:
  #     - certs:/usr/share/elasticsearch/config/certs
  #     - esdata01:/usr/share/elasticsearch/data
  #   ports:
  #     - ${ES_PORT}:9200
  #   environment:
  #     ES_JAVA_OPTS: "-Xmx256m -Xms256m"
  #     node.name: es01
  #     cluster.name: ${CLUSTER_NAME}
  #     discovery.type: single-node
      # - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      # - cluster.name=geektime
      # - node.name=es7_01
      # - bootstrap.memory_lock=true
      # - "ES_JAVA_OPTS=-Xms512m -Xmx512m"

  #     # - bootstrap.memory_lock=true
  #     # - xpack.security.enabled=true
  #     # - xpack.security.http.ssl.enabled=false
  #     # - xpack.security.http.ssl.key=certs/es01/es01.key
  #     # - xpack.security.http.ssl.certificate=certs/es01/es01.crt
  #     # - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
  #     # - xpack.security.transport.ssl.enabled=true
  #     # - xpack.security.transport.ssl.key=certs/es01/es01.key
  #     # - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
  #     # - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
  #     # - xpack.security.transport.ssl.verification_mode=certificate
  #     # - xpack.license.self_generated.type=${LICENSE}
  #   # ulimits:
  #   #   memlock:
  #   #     soft: -1
  #   #     hard: -1
  #   healthcheck:
  #     test:
  #       [
  #         "CMD-SHELL",
  #         "curl -s --user elastic:${ELASTIC_PASSWORD} https://localhost:9200 | grep -q 'missing authentication credentials'",
  #       ]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 24
  #   networks:
  #     - confluent
  # kibana:
  #   depends_on:
  #     es01:
  #       condition: service_healthy
  #   image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
  #   labels:
  #     co.elastic.logs/module: kibana
  #   volumes:
  #     - certs:/usr/share/kibana/config/certs
  #     - kibanadata:/usr/share/kibana/data
  #   ports:
  #     - ${KIBANA_PORT}:5601
  #   environment:
  #     - SERVERNAME=kibana
  #     - ELASTICSEARCH_HOSTS=https://es01:9200
  #     - ELASTICSEARCH_USERNAME=kibana_system
  #     - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
  #     - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
  #     - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
  #     - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
  #     - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
        # - XPACK_GRAPH_ENABLED=true
        # - TIMELION_ENABLED=true
        # - XPACK_MONITORING_COLLECTION_ENABLED="true"
  #   healthcheck:
  #     test:
  #       [
  #         "CMD-SHELL",
  #         "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
  #       ]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 24
  #   networks:
  #     - confluent
  # oracle-db:
  #   image: container-registry.oracle.com/database/express:latest
  #   hostname: oracle
  #   container_name: oracle
  #   environment:
  #     - ORACLE_SID=XE
  #     - ORACLE_PDB=ecommercedb
  #     - ORACLE_PWD=pwd
  #   ports:
  #     - 1522:1521
  #   volumes:
  #     - oracle-data:/opt/oracle-db/oradata
  #     - oracle-backup:/opt/oracle-db/backup
  #   healthcheck:
  #     test: ["CMD", "sqlplus", "-L", "edmn/pwd@localhost:1521/ecommercedb", "@healthcheck.sql"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   networks:
  #     - confluent
  # product:
  #   build:
  #     dockerfile: Dockerfile
  #     context: ./backend/product
  #   container_name: product
  #   ports:
  #     - "${PRODUCT_SERVICE_PORT:-}:${PRODUCT_SERVICE_PORT:-}"
  #   restart: always
  #   depends_on:
  #     - "cassandra1"
  #     - "Elasticsearch"
  #     - "broker"
  #   networks:
  #     - confluent
  #   volumes:
  #     - .:/app
  #     - /app/product/node_modules
  #   env_file:
  #     - ./backend/product/.env
  # order:
  #   build:
  #     dockerfile: Dockerfile
  #     context: ./backend/order
  #   container_name: order
  #   ports:
  #     - "${ORDER_SERVICE_PORT:-}:${ORDER_SERVICE_PORT:-}"
  #   restart: always
  #   depends_on:
  #     - "cassandra1"
  #     - "Elasticsearch"
  #     - "broker"
  #   networks:
  #     - confluent
  #   volumes:
  #     - .:/app
  #     - /app/order/node_modules
  #   env_file:
  #     - ./backend/order/.env

  # customer:
  #   build:
  #     dockerfile: Dockerfile
  #     context: ./backend/customer
  #   container_name: customer
  #   ports:
  #     - "${CUSTOMER_SERVICE_PORT:-}:${CUSTOMER_SERVICE_PORT:-}"
  #   restart: always
  #   depends_on:
  #     - "cassandra1"
  #     - "Elasticsearch"
  #     - "broker"
  #   networks:
  #     - confluent
  #   volumes:
  #     - .:/app/
  #     - /app/customer/node_modules
  #   env_file:
  #     - ./backend/customer/.env
  # nginx-proxy:
  #   build:
  #     dockerfile: Dockerfile
  #     context: ./backend/proxy
  #   depends_on:
  #     - product
  #     - order
  #     - customer
  #   networks:
  #     - confluent
  #   ports:
  #     - 80:80
networks:
  confluent:

volumes:
  redis_data:
  redis_insight_data:
  # cassandra_data_1:
  cassandra_data_2:
  cassandra_data_3:
  oracle-data:
  oracle-backup:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  metricbeatdata01:
    driver: local